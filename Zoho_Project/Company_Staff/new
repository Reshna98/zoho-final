def import_payment_madeFromExcel(request):
    if 'login_id' in request.session:
        log_id = request.session['login_id']
        log_details= LoginDetails.objects.get(id=log_id)
        if log_details.user_type == 'Company':
            com = CompanyDetails.objects.get(login_details = log_details)
        else:
            com = StaffDetails.objects.get(login_details = log_details).company 

        current_datetime = timezone.now()
        dateToday =  current_datetime.date()

        if request.method == "POST" and 'excel_file' in request.FILES:
        
            excel_file = request.FILES['excel_file']

            wb = load_workbook(excel_file)

            # checking estimate sheet columns
            try:
                ws = wb["payment_made"]
            except:
                print('sheet not found')
                messages.error(request,'`payment_made` sheet not found.! Please check.')
                return redirect(payment_mades)

            try:
                ws = wb["bills"]
            except:
                print('sheet not found')
                messages.error(request,'`payment_made_details` sheet not found.! Please check.')
                return redirect(payment_mades)
            
            ws = wb["payment_made"]
            pay_made_columns = ['SLNO', 'VENDOR', 'DATE', 'SOURCE OF SUPPLY', 'PM NO', 'DESCRIPTION','TOTAL AMOUNT','BALANCE']
            pay_made_sheet = [cell.value for cell in ws[1]]
            if  pay_made_sheet != pay_made_columns:
                print('invalid sheet')
                messages.error(request,'`payment_made` sheet column names or order is not in the required formate.! Please check.')
                return redirect(payment_mades)

            for row in ws.iter_rows(min_row=2, values_only=True):
                slno,vendor,date,source_of_supply,date,pmno, description,totalamount,balance = row
                if slno is None  or vendor is None  or date is None or source_of_supply is None  or pmno is None  or totalamount is None or balance is None:
                    print('paymentmade == invalid data')
                    messages.error(request,'`payment_made` sheet entries missing required fields.! Please check.')
                    return redirect(payment_mades)
            
            # checking items sheet columns
            ws = wb["items"]
            items_columns =['PM NO','TYPE', 'DATE', 'BILL NUMBER', 'BALANCE AMOUNT','PAYMENT' ]
            items_sheet = [cell.value for cell in ws[1]]
            if items_sheet != items_columns:
                print('invalid sheet')
                messages.error(request,'`paymentdetails` sheet column names or order is not in the required formate.! Please check.')
                return redirect(recurringInvoice)

            for row in ws.iter_rows(min_row=2, values_only=True):
                pm_no,type,date,billnumber,balanceamount,payment = row
                if pm_no is None or type is None or date is None or billnumber is None or balance_amount is None:
                    print('items == invalid data')
                    messages.error(request,'`payment_made_details` sheet entries missing required fields.! Please check.')
                    return redirect(payment_mades)
            
            # getting data from rec_invoice sheet and create rec_invoice.
            incorrect_data = []
            existing_pattern = []
            ws = wb['payment_made']
            for row in ws.iter_rows(min_row=2, values_only=True):
                slno,vendor,date,source_of_supply,date,pmno, description,totalamount,balance = row
                pay_Made_no = slno
                if slno is None:
                    continue
                # Fetching last rec_inv and assigning upcoming rec_inv no as current + 1
                # Also check for if any rec_inv is deleted and rec_inv no is continuos w r t the deleted rec_inv
                latest_pay = payment_made.objects.filter(company = com).order_by('-id').first()
                
                new_number = int(latest_pay.reference_no) + 1 if latest_inv else 1

                if payment_made_Reference.objects.filter(company = com).exists():
                    deleted = payment_made_Reference.objects.get(company = com)
                    
                    if deleted:
                        while int(deleted.reference_number) >= new_number:
                            new_number+=1
                
                vend = vendor.split(' ')
            
                if len(vend) > 2:
                    vend[1] = vend[1] + ' ' + ' '.join(vend[2:])
                    vend = vend[:2]
                    fName = vend[0]
                    lName = vend[1]
                else:
                    fName = vend[0]
                    lName = vend[1]
                print(vend,fName,lName)

                if lName == "":  
                    if not Vendor.objects.filter(company = com, first_name = fName).exists():
                        print('No Vendor1')
                        incorrect_data.append(slno)
                        continue
                    try:
                        v=Vendor.objects.filter(company = com, first_name = fName).first()
                        email = v.vendor_email
                        gstType = v.gst_treatment
                        gstIn = v.gst_number
                        adrs = f"{v.billing_address}, {v.billing_city}\n{v.billing_state}\n{v.billing_country}\n{v.billing_pincode}"
                    except:
                        pass

                if fName != "" and lName != "":  
                    if not Vendor.objects.filter(company = com, first_name = fName, last_name = lName).exists():
                        print('No Vendor2')
                        incorrect_data.append(slno)
                        continue
                    try:
                        v =Vendor.objects.filter(company = com, first_name = fName, last_name = lName).first()
                        email = v.vendor_email
                        gstType = v.gst_treatment
                        gstIn = v.gst_number
                        adrs = f"{v.billing_address}, {v.billing_city}\n{v.billing_state}\n{v.billing_country}\n{v.billing_pincode}"
                    except:
                        pass

                if date is None:
                    date = dateToday
                else:
                    date = datetime.strptime(startdate, '%Y-%m-%d').date()

              
                while payment_made.objects.filter(company = com, payment_no__iexact = pmno).exists():
                    pmno = checkPayNumber(pmno)

               

                payMade = payment_made(
                    company = com,
                    login_details = com.login_details,
                    vendor = None if v is None else v,
                    vendor_email = email,
                    billing_address = adrs,
                    gst_type = gstType,
                    gstin = gstIn,
                    source_of_supply = source_of_supply,
                    reference_no = new_number,
                    payment_no = pmno,
                    payment_method = None,
                    cheque_number = None,
                    upi_number = None,
                    bank_account_number = None,
                    total = 0.0 if totalamount == "" else float(totalamount),
                    balance = 0.0 if balance== "" else float(balance),
                    description = description,
                    status = "Draft"
                )
                payMade.save()

                # Transaction history
                history = payment_made_History(
                    company = com,
                    login_details = log_details,
                    payment_made = payMade,
                    action = 'Created'
                )
                history.save()

                # Items for the estimate
                ws = wb['items']
                for row in ws.iter_rows(min_row=2, values_only=True):
                    pm_no,type,date,billnumber,balanceamount,payment = row
                    if int(pm_no) == int(pay_Made_no):
                        print(row)
                        if discount is None:
                            discount=0
                        if balanceamount is None:
                            balanceamount=0
                        
                        if not payment_made_bills.objects.filter(company = com, bill_typetype = type).exists():
                            print('No Item')
                            incorrect_data.append(pm_no)
                            continue
                        
                          

                        payment_made_bills.objects.create(company = com, login_details = com.login_details,payment_made =payMade, type = type, date = date,bill_number=billnumber,amount_due=balanceamount,payment=payment)
                      
                       

            if not incorrect_data and not existing_pattern:
                messages.success(request, 'Data imported successfully.!')
                return redirect(payment_mades)
            else:
                if incorrect_data:
                    messages.warning(request, f'Data with following SlNo could not import due to incorrect data provided -> {", ".join(str(item) for item in incorrect_data)}')
                if existing_pattern:
                    messages.warning(request, f'Data with following SlNo could not import due to PM No pattern exists already -> {", ".join(str(item) for item in existing_pattern)}')
                return redirect(payment_mades)
        else:
            return redirect(payment_mades)
    else:
        return redirect('/')
def importRecurringInvoiceFromExcel(request):
    if 'login_id' in request.session:
        log_id = request.session['login_id']
        log_details= LoginDetails.objects.get(id=log_id)
        if log_details.user_type == 'Company':
            com = CompanyDetails.objects.get(login_details = log_details)
        else:
            com = StaffDetails.objects.get(login_details = log_details).company 

        current_datetime = timezone.now()
        dateToday =  current_datetime.date()

        if request.method == "POST" and 'excel_file' in request.FILES:
        
            excel_file = request.FILES['excel_file']

            wb = load_workbook(excel_file)

            # checking estimate sheet columns
            try:
                ws = wb["recurring_invoice"]
            except:
                print('sheet not found')
                messages.error(request,'`recurring_invoice` sheet not found.! Please check.')
                return redirect(recurringInvoice)

            try:
                ws = wb["items"]
            except:
                print('sheet not found')
                messages.error(request,'`items` sheet not found.! Please check.')
                return redirect(recurringInvoice)
            
            ws = wb["recurring_invoice"]
            rec_inv_columns = ['SLNO','CUSTOMER','DATE','PLACE OF SUPPLY','PROFILE NAME','ENTRY TYPE','RI NO','TERMS','REPEAT EVERY','PRICE LIST','DESCRIPTION','SUB TOTAL','IGST','CGST','SGST','TAX AMOUNT','ADJUSTMENT','SHIPPING CHARGE','GRAND TOTAL','ADVANCE']
            rec_inv_sheet = [cell.value for cell in ws[1]]
            if rec_inv_sheet != rec_inv_columns:
                print('invalid sheet')
                messages.error(request,'`recurring_invoice` sheet column names or order is not in the required formate.! Please check.')
                return redirect(recurringInvoice)

            for row in ws.iter_rows(min_row=2, values_only=True):
                slno, customer,date,place_of_supply, profile_name, entry_type, rec_inv_no, terms, repeat, price_list, description, subtotal, igst, cgst, sgst, taxamount, adjustment, shipping, grandtotal, advance = row
                if slno is None  or customer is None  or date is None or place_of_supply is None  or rec_inv_no is None  or terms is None  or repeat is None  or subtotal is None or taxamount is None or grandtotal is None:
                    print('recurringInvoice == invalid data')
                    messages.error(request,'`recurring_invoice` sheet entries missing required fields.! Please check.')
                    return redirect(recurringInvoice)
            
            # checking items sheet columns
            ws = wb["items"]
            items_columns = ['RI NO','PRODUCT','HSN','QUANTITY','PRICE','TAX PERCENTAGE','DISCOUNT','TOTAL']
            items_sheet = [cell.value for cell in ws[1]]
            if items_sheet != items_columns:
                print('invalid sheet')
                messages.error(request,'`items` sheet column names or order is not in the required formate.! Please check.')
                return redirect(recurringInvoice)

            for row in ws.iter_rows(min_row=2, values_only=True):
                ri_no,name,hsn,quantity,price,tax_percentage,discount,total = row
                if ri_no is None or name is None or quantity is None or tax_percentage is None or total is None:
                    print('items == invalid data')
                    messages.error(request,'`items` sheet entries missing required fields.! Please check.')
                    return redirect(recurringInvoice)
            
            # getting data from rec_invoice sheet and create rec_invoice.
            incorrect_data = []
            existing_pattern = []
            ws = wb['recurring_invoice']
            for row in ws.iter_rows(min_row=2, values_only=True):
                slno, customer,startdate,place_of_supply, profile_name, entry_type, rec_inv_no, terms, repeat, price_list, description, subtotal, igst, cgst, sgst, taxamount, adjustment, shipping, grandtotal, advance = row
                recInvNo = slno
                if slno is None:
                    continue
                # Fetching last rec_inv and assigning upcoming rec_inv no as current + 1
                # Also check for if any rec_inv is deleted and rec_inv no is continuos w r t the deleted rec_inv
                latest_inv = RecurringInvoice.objects.filter(company = com).order_by('-id').first()
                
                new_number = int(latest_inv.reference_no) + 1 if latest_inv else 1

                if Reccurring_Invoice_Reference.objects.filter(company = com).exists():
                    deleted = Reccurring_Invoice_Reference.objects.get(company = com)
                    
                    if deleted:
                        while int(deleted.reference_number) >= new_number:
                            new_number+=1
                
                cust = customer.split(' ')
            
                if len(cust) > 2:
                    cust[1] = cust[1] + ' ' + ' '.join(cust[2:])
                    cust = cust[:2]
                    fName = cust[0]
                    lName = cust[1]
                else:
                    fName = cust[0]
                    lName = cust[1]
                print(cust,fName,lName)

                if lName == "":  
                    if not Customer.objects.filter(company = com, first_name = fName).exists():
                        print('No Customer1')
                        incorrect_data.append(slno)
                        continue
                    try:
                        c = Customer.objects.filter(company = com, first_name = fName).first()
                        email = c.customer_email
                        gstType = c.GST_treatement
                        gstIn = c.GST_number
                        adrs = f"{c.billing_address}, {c.billing_city}\n{c.billing_state}\n{c.billing_country}\n{c.billing_pincode}"
                    except:
                        pass

                if fName != "" and lName != "":  
                    if not Customer.objects.filter(company = com, first_name = fName, last_name = lName).exists():
                        print('No Customer2')
                        incorrect_data.append(slno)
                        continue
                    try:
                        c = Customer.objects.filter(company = com, first_name = fName, last_name = lName).first()
                        email = c.customer_email
                        gstType = c.GST_treatement
                        gstIn = c.GST_number
                        adrs = f"{c.billing_address}, {c.billing_city}\n{c.billing_state}\n{c.billing_country}\n{c.billing_pincode}"
                    except:
                        pass

                if startdate is None:
                    startdate = dateToday
                else:
                    startdate = datetime.strptime(startdate, '%Y-%m-%d').date()

                PatternStr = []
                for word in rec_inv_no:
                    if word.isdigit():
                        pass
                    else:
                        PatternStr.append(word)
                
                pattern = ''
                for j in PatternStr:
                    pattern += j

                pattern_exists = checkRecInvNumberPattern(pattern)

                if pattern !="" and pattern_exists:
                    existing_pattern.append(slno)
                    continue

                while RecurringInvoice.objects.filter(company = com, rec_invoice_no__iexact = rec_inv_no).exists():
                    rec_inv_no = getNextRINumber(rec_inv_no)

                try:
                    trm = Company_Payment_Term.objects.get(company = com, term_name = terms)
                    endDate = startdate+timedelta(days = trm.days)
                except:
                    trm = None
                    endDate = None
                try:
                    priceList = PriceList.objects.get(company = com, name = price_list)
                except:
                    priceList = None

                try:
                    rpt = CompanyRepeatEvery.objects.get(company = com, repeat_every = repeat)
                except:
                    rpt = None

                recInv = RecurringInvoice(
                    company = com,
                    login_details = com.login_details,
                    customer = None if c is None else c,
                    customer_email = email,
                    billing_address = adrs,
                    gst_type = gstType,
                    gstin = gstIn,
                    place_of_supply = place_of_supply,
                    profile_name = profile_name,
                    entry_type = None if entry_type == "" else entry_type,
                    reference_no = new_number,
                    rec_invoice_no = rec_inv_no,
                    payment_terms = trm,
                    start_date = startdate,
                    end_date = endDate,
                    salesOrder_no = None,
                    price_list_applied = True if priceList is not None else False,
                    price_list = priceList,
                    repeat_every = rpt,
                    payment_method = None,
                    cheque_number = None,
                    upi_number = None,
                    bank_account_number = None,
                    subtotal = 0.0 if subtotal == "" else float(subtotal),
                    igst = 0.0 if igst == "" else float(igst),
                    cgst = 0.0 if cgst == "" else float(cgst),
                    sgst = 0.0 if sgst == "" else float(sgst),
                    tax_amount = 0.0 if taxamount == "" else float(taxamount),
                    adjustment = 0.0 if adjustment == "" else float(adjustment),
                    shipping_charge = 0.0 if shipping == "" else float(shipping),
                    grandtotal = 0.0 if grandtotal == "" else float(grandtotal),
                    advance_paid = 0.0 if advance == "" else float(advance),
                    balance = float(grandtotal) - float(advance),
                    description = description,
                    status = "Draft"
                )
                recInv.save()

                # Transaction history
                history = RecurringInvoiceHistory(
                    company = com,
                    login_details = log_details,
                    recurring_invoice = recInv,
                    action = 'Created'
                )
                history.save()

                # Items for the estimate
                ws = wb['items']
                for row in ws.iter_rows(min_row=2, values_only=True):
                    rec_no,name,hsn,quantity,price,tax_percentage,discount,total = row
                    if int(rec_no) == int(recInvNo):
                        print(row)
                        if discount is None:
                            discount=0
                        if price is None:
                            price=0
                        if quantity is None:
                            quantity=0
                        if not Items.objects.filter(company = com, item_name = name).exists():
                            print('No Item')
                            incorrect_data.append(rec_no)
                            continue
                        try:
                            itm = Items.objects.filter(company = com, item_name = name).first()
                        except:
                            pass

                        Reccurring_Invoice_item.objects.create(company = com, login_details = com.login_details, reccuring_invoice = recInv, item = itm, hsn = hsn, quantity = quantity, price = price, tax_rate = tax_percentage, discount = discount, total = total)
                        itm.current_stock -= int(quantity)
                        itm.save()

            if not incorrect_data and not existing_pattern:
                messages.success(request, 'Data imported successfully.!')
                return redirect(recurringInvoice)
            else:
                if incorrect_data:
                    messages.warning(request, f'Data with following SlNo could not import due to incorrect data provided -> {", ".join(str(item) for item in incorrect_data)}')
                if existing_pattern:
                    messages.warning(request, f'Data with following SlNo could not import due to RI No pattern exists already -> {", ".join(str(item) for item in existing_pattern)}')
                return redirect(recurringInvoice)
        else:
            return redirect(recurringInvoice)
    else:
        return redirect('/')